# GRPO Algorithm Configuration
grpo:
  num_prompts_per_step: 128
  num_generations_per_prompt: 32
  max_rollout_turns: 1
  max_num_steps: 1000000
  normalize_rewards: true
  use_leave_one_out_baseline: false
  val_period: 10
  val_at_start: false
  max_val_samples: 128
  val_batch_size: 128

loss_fn:
  reference_policy_kl_penalty: 0
  ratio_clip_min: 0.2
  ratio_clip_max: 0.2
  ratio_clip_c: null
    # (default off) loss formulation improvements (docs/guides/grpo.md#loss)
  use_on_policy_kl_approximation: false
  use_importance_sampling_correction: false
  token_level_loss: true

checkpointing:
  enabled: true
  checkpoint_dir: "results/nemo_rl_grpo_qwen2_5_7b_cl"
  metric_name: "val_reward"
  higher_is_better: true
  keep_top_k: 10
  save_period: 10

policy:
  model_name: "Qwen/Qwen2.5-7B"
  tokenizer:
    name: ${policy.model_name} ## specify if you'd like to use a tokenizer different from the model's default
  train_global_batch_size: 128
  train_micro_batch_size: 1
  generation_batch_size: 32 # Only used when generating using HF backend
  logprob_batch_size: 2
  max_total_sequence_length: 5120
  precision: "bfloat16"
  fsdp_offload_enabled: false
  activation_checkpointing_enabled: false
  refit_buffer_size_gb: 4 # used for refitting inference engine, the unit is GB

  dtensor_cfg:
    enabled: true
    cpu_offload: false
    sequence_parallel: false
    activation_checkpointing: true
    tensor_parallel_size: 1

  # dynamic_batching improves performance by ensuring logprob and training microbatches
  # have a sufficent number of tokens to maximize GPU utilization. Specifically, variable length
  # responses are sorted by sequence length and bucketed into microbatches with a total
  # amount of tokens is approximately close to 'train_mb_tokens' and 'logprob_mb_tokens' for the
  # training and logprob stages respectively.
  dynamic_batching:
    enabled: True
  #  train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
  #  logprob_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.logprob_batch_size}}
    train_mb_tokens: 8192
    logprob_mb_tokens: 8192
    sequence_length_round: 64

  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.dtensor_cfg.tensor_parallel_size}
  max_grad_norm: 1.0

  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 1e-6
      weight_decay: 0.01
      betas: [0.9, 0.999]
      eps: 1e-8
      # when using Dtensor, we need to set foreach
      # and fused to False
      foreach: False
      fused: False

  scheduler:
    - name: "torch.optim.lr_scheduler.LinearLR"
      kwargs:
        start_factor: 0.1
        end_factor: 1.0
        total_iters: 10
    - name: "torch.optim.lr_scheduler.ConstantLR"
      kwargs:
        factor: 1.0
        total_iters: 10000000000
    - milestones: [10]

  generation:
    backend: "vllm"
    max_new_tokens: ${policy.max_total_sequence_length}
    temperature: 1.0
    top_p: 1.0
    top_k: null
    stop_token_ids: null
    stop_strings: null
    vllm_cfg:
      precision: ${policy.precision}
      tensor_parallel_size: 2
      gpu_memory_utilization: 0.6
      max_model_len: ${policy.max_total_sequence_length}

data:
  max_input_seq_length: 1024 # upper bound, real truncation occurs at vllm.max_model_len
  prompt_file: "cot.txt"
  system_prompt_file: null
  dataset_name: "math-cl"
  
env:
  math:
    num_workers: 8

logger:
  log_dir: "logs"  # Base directory for all logs
  num_val_samples_to_print: 2 # Number of validation samples to pretty print on terminal
  wandb_enabled: true
  tensorboard_enabled: false
  monitor_gpus: false  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "nemo_rl_grpo_qwen2_5_7b_cl"
    name: "nemo_rl_qwen2_5_7b_grpo_cl"
  tensorboard: {}
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)

cluster:
  gpus_per_node: 8
  num_nodes: 1
